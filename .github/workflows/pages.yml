name: GitHub Pages brrrrrrr

on:
  push:
    branches: [ main ]

jobs:
  github-pages:
    name: Je doit tout refaire pour GitHub Pages à cause du BASE_PATH
    runs-on: ubuntu-latest

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Je télécharge le code source
        uses: actions/checkout@v3

      - name: J'installe Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: L'enfert des dépendances
        run: deno install --allow-scripts

      - name: Je fabrique le code illisible sauce GitHub
        run: deno task build
        env:
          BASE_PATH: '/${{ github.event.repository.name }}'

      - name: Je donne le code illisible
        uses: actions/upload-pages-artifact@v3.0.1
        with:
          path: .output/public

      - name: Déploiement final à GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4.0.5

  fabrication:
    name: Je prépare tout
    runs-on: ubuntu-latest

    steps:
      - name: Je télécharge le code source
        uses: actions/checkout@v3

      - name: J'installe Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: L'enfert des dépendances
        run: deno install --allow-scripts

      - name: Je fabrique le code illisible
        run: deno task build

      - name: Je donne le code illisible
        uses: actions/upload-artifact@v4
        with:
          name: resultat-fabrication
          path: .output/public

  cloudflare-pages:
    name: Cloudflare Pages
    needs: fabrication
    runs-on: ubuntu-latest

    steps:
      - name: Je prends le code illisible
        uses: actions/download-artifact@v4
        with:
          name: resultat-fabrication

      - name: Je le redonne à Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy . --project-name=${{ secrets.CLOUDFLARE_PROJECT }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  surge:
    name: Surge
    needs: fabrication
    runs-on: ubuntu-latest

    steps:
      - name: Je prends le code illisible
        uses: actions/download-artifact@v4
        with:
          name: resultat-fabrication

      - name: Installation de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Installation de Surge
        run: npm install -g surge
      - name: Déploiement sur Surge
        run: surge ./ ${{ secrets.SURGE_DOMAIN }} --token ${{ secrets.SURGE_TOKEN }}

  neocities:
    name: Neocities
    needs: fabrication
    runs-on: ubuntu-latest

    steps:
      - name: Je prends le code illisible
        uses: actions/download-artifact@v4
        with:
          name: resultat-fabrication

      - name: Je l'envoie à Neocities
        uses: bcomnes/deploy-to-neocities@v3 # Yep some random repos
        with:
          api_key: ${{ secrets.NEOCITIES_API_KEY }}
          cleanup: true
          dist_dir: ./

  nekoweb:
    name: Nekoweb
    needs: fabrication
    runs-on: ubuntu-latest

    steps:
      - name: Je prends le code illisible
        uses: actions/download-artifact@v4
        with:
          name: resultat-fabrication
          path: public

      - name: Je l'envoie à Nekoweb
        uses: indiefellas/deploy2nekoweb@v4
        with:
          nekoweb-api-key: ${{ secrets.NEKOWEB_API_KEY }}
          nekoweb-folder: .
          directory: public

  vercel:
    name: Vercel
    needs: fabrication
    runs-on: ubuntu-latest

    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    steps:
      - name: Je prends le code illisible
        uses: actions/download-artifact@v4
        with:
          name: resultat-fabrication
          path: public

      - name: Installation de Vercel CLI
        run: npm install --global vercel@latest
      - name: Tous les paramètres...
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
      - name: Tout petit build
        run: vercel build --prod --token=${{ secrets.VERCEL_TOKEN }} # Cela ne fait quasiment rien
      - name: Déploiement final !!!
        run: vercel deploy --prebuilt --prod --token=${{ secrets.VERCEL_TOKEN }}
